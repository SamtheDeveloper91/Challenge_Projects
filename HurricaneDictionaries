# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# write your update damages function here:
def update_damages(list1):
  damages_fixed = []
  for i in list1:
    if 'M' in i:
      j = i.replace('M', '000000')
      k = j.replace('.', '')
      damages_fixed.append(float(k))
    elif 'B' in i:
      j = i.replace('B', '00000000')
      k = j.replace('.', '')
      damages_fixed.append(float(k))
    else:
      damages_fixed.append(i)
  return damages_fixed

# write your construct hurricane dictionary function here:
main_list = list(zip(names, months, years, max_sustained_winds, areas_affected, update_damages(damages), deaths))

def cane_dict_by_name(list1):
  hurricane_dict_by_name = {list1[i][0]:list1[i] for i in range(len(list1))}
  return hurricane_dict_by_name

name_dictionary = cane_dict_by_name(main_list)
print(name_dictionary)

# write your construct hurricane by year dictionary function here:
def cane_dict_by_year(list2):
  hurricane_dict_by_year = {list2[i][2]:list2[i] for i in range(len(list2))}
  return hurricane_dict_by_year

year_dictionary = cane_dict_by_year(main_list)
#print(year_dictionary)
# write your count affected areas function here:
def location_counts(list3):
  place_keys = []
  for i in range(len(list3)):
    place_keys += [place for place in list3[i][4]]
  place_count = [place_keys.count(place) for place in place_keys]
  place_dict = {place: count for place, count in zip(place_keys, place_count)}
  return place_dict
#print(location_counts(main_list))

# write your find most affected area function here:
def find_worst_area_by_count(list4):
  totals_by_loc_val = list(location_counts(list4).values())
  totals_by_loc_key = list(location_counts(list4).keys())
  max_total = max(list(totals_by_loc_val))
  max_key = totals_by_loc_key[totals_by_loc_val.index(max_total)]
  #print(max_key + ": " + str(max_total))

find_worst_area_by_count(main_list)

# write your greatest number of deaths function here:
def calculate_most_deadly(list5):
  name_keys = [key for key in name_dictionary]
  deaths = []
  for i in range(len(main_list)):
    deaths.append(main_list[i][6])
  names_deaths_zip = list(zip(name_keys, deaths))
  names_deaths_dict = dict(names_deaths_zip)
  max_deaths= max(deaths)
  worst_cane = name_keys[deaths.index(max_deaths)]
  most_deadly = worst_cane + ": " + str(max_deaths)
  #print(most_deadly)

calculate_most_deadly(main_list)

# write your catgeorize by mortality function here:
def categorize_by_mortality(dictionary):
  category_dictionary = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}

  for name in dictionary:
    if name_dictionary[name][6] in range(100):
      category_dictionary[1].append(name_dictionary[name])
    elif name_dictionary[name][6] in range(100, 500):
      category_dictionary[2].append(name_dictionary[name])
    elif name_dictionary[name][6] in range(500, 1000):
      category_dictionary[3].append(name_dictionary[name])
    elif name_dictionary[name][6] in range(1000, 10000):
      category_dictionary[4].append(name_dictionary[name])
    elif name_dictionary[name][6] > 10000:
      category_dictionary[5].append(name_dictionary[name])
    else:
      category_dictionary[0].append(name_dictionary[name])
  return category_dictionary

mortality_dictionary = categorize_by_mortality(name_dictionary)

# write your greatest damage function here:

def greatest_damage():
  recorded_damages=[]
  for damage in update_damages(damages):
    if damage != 'Damages not recorded':
      recorded_damages.append(damage)
    else:
      recorded_damages.append(0)
  names_and_damages = list(zip([name for name in name_dictionary], recorded_damages))
  name_damage_dict = dict(names_and_damages)
  for name in name_damage_dict:
    if name_damage_dict[name] == max(recorded_damages):
      print(name + ": " + str(name_damage_dict[name]))
  return name_damage_dict

damage_dictionary = greatest_damage()

# write your catgeorize by damage function here:

def categorize_by_damage():
  damage_categories = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}
  for name in damage_dictionary:
    if damage_dictionary[name] == 0:
      damage_categories[0].append(name_dictionary[name])
    elif 1 <= damage_dictionary[name] <= 100000000:
      damage_categories[1].append(name_dictionary[name])
    elif 100000001 <= damage_dictionary[name] <= 1000000000:
      damage_categories[2].append(name_dictionary[name])
    elif 1000000001 <= damage_dictionary[name] <= 10000000000:
      damage_categories[3].append(name_dictionary[name])
    elif 10000000001 <= damage_dictionary[name] <= 50000000000:
      damage_categories[4].append(name_dictionary[name])
    else:
      damage_categories[5].append(name_dictionary[name])
  print(damage_categories)

categorize_by_damage()
